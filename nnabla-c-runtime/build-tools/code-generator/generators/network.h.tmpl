// Copyright (c) 2017 Sony Corporation. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// *WARNING*
// THIS FILE IS AUTO-GENERATED DUMMY CODE BY CODE GENERATOR.

#ifndef H_NETWORK_H__
#define H_NETWORK_H__

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#include <stdint.h> // for fixed bit length integer type
#include <stdlib.h> // for size_t

#define NN_C_RUNTIME_VERSION  ("${C_RUNTIME_VERSION}")
#define NN_BINARY_FORMAT_MINIMUM_VERSION (${NNB_MINIMUM_VERSION})
#define NN_BINARY_FORMAT_VERSION  (${NNB_VERSION})
#define NN_BINARY_FORMAT_REVISION ("${BINARY_VERSION}")

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @defgroup Network Internal network representation
/// @{

typedef int32_t pointer_index_t; ///< Index of data.
typedef uint32_t nn_size_t; ///< Size of data.

/// @brief List of integer
typedef struct {
    nn_size_t size;       ///< Size of list.
    pointer_index_t list; ///< Index of list data.
  } nn_list_t;

/// @brief Data types.
typedef enum {
  NN_DATA_TYPE_FLOAT, ///< 32bit float.
  NN_DATA_TYPE_INT16, ///< 16bit integer.
  NN_DATA_TYPE_INT8,  ///<  8bit integer.
  NN_DATA_TYPE_SIGN,  ///< Binary.
  END_OF_NN_DATA_TYPE
} nn_data_type_t;

/// @brief Definition of Variable.
typedef struct {
    uint32_t id;             ///< Identifier
    nn_list_t shape;         ///< Shape
    nn_data_type_t type : 4; ///< Type of param values
    unsigned int fp_pos : 4; ///< floating point position.
    int32_t data_index;      ///< Location of data. If negative, it means data
                        ///buffer index. Otherwise it means location of data
                        ///in memory.
} nn_variable_t;

/// @brief Function types.
typedef enum {
    ${FUNCTION_ENUMS}
    NN_END_OF_FUNCTION = 65535          // Ensure this type has 16bits
} nn_function_type_t;

/// @brief Function implement type.
typedef enum {
  /// User defined implement has implement type 0 to 99.
  NN_END_OF_USER_DEFINED_FUNCTION_IMPLEMENT = 99,
  /// Select functions automatically with input type.
  NN_FUNCTION_IMPLEMENT_AUTO,
  /// RESERVED: Calculate with 32bit floating point.
  NN_FUNCTION_IMPLEMENT_FLOAT,
  /// RESERVED: Calculate with 16bit fixed point.
  NN_FUNCTION_IMPLEMENT_FIXED16,
  /// RESERVED: Calculate with 8bit fixed point.
  NN_FUNCTION_IMPLEMENT_FIXED8,
  /// Ensure this type has 16bits  
  NN_END_OF_IMPLEMENT = 65535
} nn_function_implement_t;

/// @brief Common definition of Function.
/// This type is to be used for the function does not have arguments.

typedef struct {
  nn_function_type_t type : 16;        ///< Common: type of function.
  nn_function_implement_t impl : 16;   ///< Common: function implementation.
  nn_list_t inputs;               ///< Common: List of input variables.
  nn_list_t outputs;              ///< Common: List of output variables.
} nn_function_t;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @defgroup IndividualFunctions Individual Functions
/// @brief Individual function definitions
/// @{

${FUNCTION_DEFINES}

/// @}

/// Define memory size at the end of nn_network_t.
typedef struct {
  nn_size_t num_of_data; ///< Number of datum
  nn_size_t data_size;   ///< Total data size in byte
} nn_memory_t;

/// @brief Definition of Network.
///
typedef struct {
  uint32_t version;    ///< binary format version
  uint32_t revision;   ///< function-level compatibility revision
  nn_list_t buffers;   ///< list of nn_variable_buffer_t
  nn_list_t variables; ///< list of nn_variable_t
  nn_list_t functions; ///< list of nn_function_t
  nn_list_t inputs;    ///< list of input variable ids
  nn_list_t outputs;   ///< list of output variable ids
  nn_memory_t memory;  ///< memory to store all data.
} nn_network_t;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @defgroup ErrorCodes Common Error codes
///
/// @{
#define NN_ERROR_CODE_NOERROR (0) ///< No error
/// @}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @defgroup DebugFunctions Debug functionality
///
/// @{
#ifndef WHOAMI
/// Print specified message and position itself.
#define WHOAMI(...)                                                     \
  {                                                                     \
    printf("%s:%d: ", __FILE__, __LINE__);                              \
    printf(__VA_ARGS__);                                                \
    printf("\n");                                                       \
    fflush(stdout);                                                     \
  }
#endif // WHOAMI
/// @}

/// @}
#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif // H_NETWORK_H__
