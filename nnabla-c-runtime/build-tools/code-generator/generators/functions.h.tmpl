// Copyright (c) 2017 Sony Corporation. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// *WARNING*
// THIS FILE IS AUTO-GENERATED DUMMY CODE BY CODE GENERATOR.

#ifndef H_FUNCTIONS_H__
#define H_FUNCTIONS_H__

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#include <stdint.h>
#include <stdio.h>

#include <nnablart/network.h>

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @defgroup Functions Functions
/// @brief Feed forward function implementations.
/// @{

/// @brief Error definitions
typedef enum {
  RT_FUNCTION_ERROR_UNIMPLEMENTED = -999,   ///< Invalid shape. (-999)
  RT_FUNCTION_ERROR_MALLOC,                 ///< Memory allocation error. (-998)
  RT_FUNCTION_ERROR_INVALID_NUM_OF_INPUTS,  ///< Invalid number of inputs.(-997)
  RT_FUNCTION_ERROR_INVALID_NUM_OF_OUTPUTS, ///< Invalid number of outputs. (-996)
  RT_FUNCTION_ERROR_INVALID_SHAPE,          ///< Invalid shape. (-995)
  RT_FUNCTION_ERROR_NOERROR = 0             ///< No error. (0)
} rt_function_error_t;

/// @brief List
typedef struct {
  int size;  ///< Size of list
  int *data; ///< Data
} rt_list_t;

/// @brief Allocation type
typedef enum {
  RT_BUFFER_ALLOCATE_TYPE_MALLOC = 0, ///< Allocated by runtime
  RT_BUFFER_ALLOCATE_TYPE_ALLOCATED,  ///< User allocated
  RT_BUFFER_ALLOCATE_TYPE_INITIAL,    ///< Shared buffers
  END_OF_RT_BUFFER_ALLOCATE_TYPE      ///< Max num of rt_buffer_allocate_type_t
} rt_buffer_allocate_type_t;

/// @brief Variable
typedef struct {
  rt_list_t shape;         ///< Shape of variable
  nn_data_type_t type : 4; ///< Type of param values
  unsigned int fp_pos : 4; ///< Fixed point position
  float coefficient;       ///< Coefficient value for convert int to float.
  void *data;              ///< Pointer to real data of variable
} rt_variable_t;

/// @brief Function
struct st_rt_function_t;
typedef struct st_rt_function_t rt_function_t;

struct st_rt_function_t {
  int num_of_inputs;       ///< Number of inputs
  rt_variable_t **inputs;  ///< List of input variable
  int num_of_outputs;      ///< Number of outputs
  rt_variable_t **outputs; ///< List of output variable

  rt_function_error_t (*exec_func)(rt_function_t *f);
  rt_function_error_t (*free_local_context_func)(rt_function_t *f);

  void *local_context;     ///< General purpose context
};

extern void *(*rt_variable_malloc_func)(size_t size);  ///< Variable malloc function pointer
extern void (*rt_variable_free_func)(void *ptr);       ///< Variable free function pointer

extern void *(*rt_malloc_func)(size_t size);           ///< malloc function pointer
extern void (*rt_free_func)(void *ptr);                ///< free function pointer

${FUNCTION_DEFINES}

/// @}

#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif // H_FUNCTIONS_H__
